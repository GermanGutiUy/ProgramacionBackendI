<div class="container-fluid p-4">
  <!-- Header Section -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h1 class="mb-0">
            <i class="fas fa-shopping-bag text-success me-2"></i>
            Gestión de Carritos
          </h1>
          <p class="text-muted mb-0">Administra los carritos de compra de los usuarios</p>
        </div>
        <div class="d-flex gap-2">
          <button class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#createCartModal">
            <i class="fas fa-plus me-1"></i>Crear Carrito
          </button>
          <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addToCartModal">
            <i class="fas fa-cart-plus me-1"></i>Agregar Producto
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Cart Management Section -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">
            <i class="fas fa-search me-2"></i>
            Buscar Carrito
          </h5>
        </div>
        <div class="card-body">
          <form id="searchCartForm" class="row g-3">
            <div class="col-md-8">
              <label class="form-label">ID del Carrito</label>
              <input type="text" id="cartIdInput" class="form-control" placeholder="Ingresa el ID del carrito">
            </div>
            <div class="col-md-4 d-flex align-items-end">
              <button type="submit" class="btn btn-primary w-100">
                <i class="fas fa-search me-1"></i>Buscar Carrito
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Cart Details Section -->
  <div class="row mb-4" id="cartDetailsSection" style="display: none;">
    <div class="col-12">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">
            <i class="fas fa-shopping-cart me-2"></i>
            Detalles del Carrito
          </h5>
          <div class="d-flex gap-2">
            <button class="btn btn-sm btn-outline-warning" onclick="clearCart()">
              <i class="fas fa-trash me-1"></i>Vaciar Carrito
            </button>
            <button class="btn btn-sm btn-outline-danger" onclick="deleteCart()">
              <i class="fas fa-times me-1"></i>Eliminar Carrito
            </button>
          </div>
        </div>
        <div class="card-body">
          <div id="cartDetails">
            <!-- Cart details will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Cart Actions Section -->
  <div class="row" id="cartActionsSection" style="display: none;">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">
            <i class="fas fa-cogs me-2"></i>
            Acciones del Carrito
          </h5>
        </div>
        <div class="card-body">
          <div class="row g-3">
            <div class="col-md-6">
              <div class="card">
                <div class="card-body">
                  <h6 class="card-title">
                    <i class="fas fa-edit text-warning me-2"></i>
                    Actualizar Cantidad
                  </h6>
                  <form id="updateQuantityForm" class="row g-2">
                    <div class="col-6">
                      <input type="text" name="pid" class="form-control" placeholder="ID Producto" required>
                    </div>
                    <div class="col-4">
                      <input type="number" name="quantity" class="form-control" placeholder="Cantidad" min="1" required>
                    </div>
                    <div class="col-2">
                      <button type="submit" class="btn btn-warning btn-sm w-100">
                        <i class="fas fa-save"></i>
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="card">
                <div class="card-body">
                  <h6 class="card-title">
                    <i class="fas fa-minus-circle text-danger me-2"></i>
                    Eliminar Producto
                  </h6>
                  <form id="removeProductForm" class="row g-2">
                    <div class="col-8">
                      <input type="text" name="pid" class="form-control" placeholder="ID Producto" required>
                    </div>
                    <div class="col-4">
                      <button type="submit" class="btn btn-danger btn-sm w-100">
                        <i class="fas fa-trash me-1"></i>Eliminar
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create Cart Modal -->
<div class="modal fade" id="createCartModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-plus text-success me-2"></i>
          Crear Nuevo Carrito
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>¿Estás seguro de que quieres crear un nuevo carrito vacío?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-success" onclick="createCart()">
          <i class="fas fa-plus me-1"></i>Crear Carrito
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add to Cart Modal -->
<div class="modal fade" id="addToCartModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-cart-plus text-primary me-2"></i>
          Agregar Producto al Carrito
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="addToCartForm">
        <div class="modal-body">
          <div class="row g-3">
            <div class="col-12">
              <label class="form-label">ID del Carrito</label>
              <input type="text" name="cid" class="form-control" required>
            </div>
            <div class="col-12">
              <label class="form-label">ID del Producto</label>
              <input type="text" name="pid" class="form-control" required>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-cart-plus me-1"></i>Agregar al Carrito
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
let currentCartId = null;

// Create Cart Function
async function createCart() {
  try {
    const response = await fetch('/api/carts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    if (response.ok) {
      const result = await response.json();
      showNotification(`Carrito creado con ID: ${result.cart._id}`, 'success');
      bootstrap.Modal.getInstance(document.getElementById('createCartModal')).hide();
    } else {
      const error = await response.json();
      showNotification('Error: ' + error.msj, 'danger');
    }
  } catch (error) {
    showNotification('Error al crear carrito', 'danger');
  }
}

// Search Cart Function
document.getElementById('searchCartForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const cartId = document.getElementById('cartIdInput').value.trim();
  
  if (!cartId) {
    showNotification('Por favor ingresa un ID de carrito', 'warning');
    return;
  }
  
  try {
    const response = await fetch(`/api/carts/${cartId}`);
    
    if (response.ok) {
      const cart = await response.json();
      currentCartId = cartId;
      displayCartDetails(cart);
      showNotification('Carrito encontrado', 'success');
    } else {
      const error = await response.json();
      showNotification('Error: ' + error.msj, 'danger');
    }
  } catch (error) {
    showNotification('Error al buscar carrito', 'danger');
  }
});

// Display Cart Details
function displayCartDetails(cart) {
  const cartDetailsSection = document.getElementById('cartDetailsSection');
  const cartActionsSection = document.getElementById('cartActionsSection');
  const cartDetails = document.getElementById('cartDetails');
  
  let productsHTML = '';
  
  if (cart.products && cart.products.length > 0) {
    productsHTML = `
      <div class="table-responsive">
        <table class="table">
          <thead>
            <tr>
              <th>Producto</th>
              <th>Precio</th>
              <th>Cantidad</th>
              <th>Subtotal</th>
            </tr>
          </thead>
          <tbody>
            ${cart.products.map(item => `
              <tr>
                <td>${item.product.title || 'Producto no encontrado'}</td>
                <td>$${item.product.price || 0}</td>
                <td>${item.quantity}</td>
                <td>$${(item.product.price || 0) * item.quantity}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
      <div class="mt-3">
        <h6>Total de productos: ${cart.products.length}</h6>
        <h6>Total: $${cart.products.reduce((sum, item) => sum + ((item.product.price || 0) * item.quantity), 0)}</h6>
      </div>
    `;
  } else {
    productsHTML = `
      <div class="text-center py-4">
        <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">El carrito está vacío</h5>
        <p class="text-muted">Agrega productos usando el botón de arriba</p>
      </div>
    `;
  }
  
  cartDetails.innerHTML = `
    <div class="row">
      <div class="col-md-6">
        <h6><strong>ID del Carrito:</strong> ${cart._id}</h6>
        <h6><strong>Fecha de Creación:</strong> ${new Date(cart.createdAt).toLocaleDateString()}</h6>
      </div>
      <div class="col-md-6">
        <h6><strong>Productos:</strong> ${cart.products ? cart.products.length : 0}</h6>
      </div>
    </div>
    <hr>
    ${productsHTML}
  `;
  
  cartDetailsSection.style.display = 'block';
  cartActionsSection.style.display = 'block';
}

// Add to Cart Form Handler
document.getElementById('addToCartForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const cid = formData.get('cid');
  const pid = formData.get('pid');
  
  try {
    const response = await fetch(`/api/carts/${cid}/products/${pid}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    if (response.ok) {
      showNotification('Producto agregado al carrito exitosamente', 'success');
      bootstrap.Modal.getInstance(document.getElementById('addToCartModal')).hide();
      e.target.reset();
      
      // Refresh cart details if it's the current cart
      if (currentCartId === cid) {
        const cartResponse = await fetch(`/api/carts/${cid}`);
        if (cartResponse.ok) {
          const cart = await cartResponse.json();
          displayCartDetails(cart);
        }
      }
    } else {
      const error = await response.json();
      showNotification('Error: ' + error.msj, 'danger');
    }
  } catch (error) {
    showNotification('Error al agregar al carrito', 'danger');
  }
});

// Update Quantity Form Handler
document.getElementById('updateQuantityForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const pid = formData.get('pid');
  const quantity = formData.get('quantity');
  
  if (!currentCartId) {
    showNotification('No hay carrito seleccionado', 'warning');
    return;
  }
  
  try {
    const response = await fetch(`/api/carts/${currentCartId}/products/${pid}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ quantity: parseInt(quantity) })
    });
    
    if (response.ok) {
      showNotification('Cantidad actualizada exitosamente', 'success');
      e.target.reset();
      
      // Refresh cart details
      const cartResponse = await fetch(`/api/carts/${currentCartId}`);
      if (cartResponse.ok) {
        const cart = await cartResponse.json();
        displayCartDetails(cart);
      }
    } else {
      const error = await response.json();
      showNotification('Error: ' + error.msj, 'danger');
    }
  } catch (error) {
    showNotification('Error al actualizar cantidad', 'danger');
  }
});

// Remove Product Form Handler
document.getElementById('removeProductForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const pid = formData.get('pid');
  
  if (!currentCartId) {
    showNotification('No hay carrito seleccionado', 'warning');
    return;
  }
  
  try {
    const response = await fetch(`/api/carts/${currentCartId}/products/${pid}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      showNotification('Producto eliminado del carrito exitosamente', 'success');
      e.target.reset();
      
      // Refresh cart details
      const cartResponse = await fetch(`/api/carts/${currentCartId}`);
      if (cartResponse.ok) {
        const cart = await cartResponse.json();
        displayCartDetails(cart);
      }
    } else {
      const error = await response.json();
      showNotification('Error: ' + error.msj, 'danger');
    }
  } catch (error) {
    showNotification('Error al eliminar producto', 'danger');
  }
});

// Clear Cart Function
async function clearCart() {
  if (!currentCartId) {
    showNotification('No hay carrito seleccionado', 'warning');
    return;
  }
  
  if (confirm('¿Estás seguro de que quieres vaciar el carrito?')) {
    try {
      const response = await fetch(`/api/carts/${currentCartId}/clear`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        showNotification('Carrito vaciado exitosamente', 'success');
        
        // Refresh cart details
        const cartResponse = await fetch(`/api/carts/${currentCartId}`);
        if (cartResponse.ok) {
          const cart = await cartResponse.json();
          displayCartDetails(cart);
        }
      } else {
        const error = await response.json();
        showNotification('Error: ' + error.msj, 'danger');
      }
    } catch (error) {
      showNotification('Error al vaciar carrito', 'danger');
    }
  }
}

// Delete Cart Function
async function deleteCart() {
  if (!currentCartId) {
    showNotification('No hay carrito seleccionado', 'warning');
    return;
  }
  
  if (confirm('¿Estás seguro de que quieres eliminar el carrito? Esta acción no se puede deshacer.')) {
    try {
      const response = await fetch(`/api/carts/${currentCartId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        showNotification('Carrito eliminado exitosamente', 'success');
        currentCartId = null;
        document.getElementById('cartDetailsSection').style.display = 'none';
        document.getElementById('cartActionsSection').style.display = 'none';
        document.getElementById('cartIdInput').value = '';
      } else {
        const error = await response.json();
        showNotification('Error: ' + error.msj, 'danger');
      }
    } catch (error) {
      showNotification('Error al eliminar carrito', 'danger');
    }
  }
}

// Show notification function
function showNotification(message, type = 'success') {
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
  alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    if (alertDiv.parentNode) {
      alertDiv.remove();
    }
  }, 5000);
}
</script>
